Given a string s. In one step you can insert any character at any index of the string.
Return the minimum number of steps to make s palindrome.
A Palindrome String is one that reads the same backward as well as forward.

Input: s = "zzazz"
Output: 0
Explanation: The string "zzazz" is already palindrome we don't need any insertions.

Method 1: Memoization
TC - O(N*N) SC - O(N*N)

class Solution {
public:
    int Util(const string& s, int l, int r, int dp[][1001]) {
        if(l > r) 
            return 0; 
        if(l == r) 
            return 1; 
        if(dp[l][r] != 0) 
			return dp[l][r];
        if(s[l] == s[r])
            return dp[l][r] = Util(s, l+1, r-1, dp) + 2;
        return dp[l][r] = max(Util(s, l+1, r, dp), Util(s, l, r-1, dp));
    }
    int minInsertions(string s) {
        int dp[1001][1001] = {};
        return s.size() - Util(s, 0, s.size() - 1, dp);
    }
};

Method 2: Tabulation
TC - O(N*N) SC - O(N*N)

class Solution {
public:
    int minInsertions(string s) {
        string p = s;
        reverse(s.begin(), s.end());
        int m = s.size();
        int n = p.size();
        
        int dp[m+1][n+1];   
        for(int i=0;i<=m;i++)            
			dp[i][0] = 0;
		for(int i=0;i<=n;i++)
			dp[0][i] = 0;

		for(int i=1;i<=m;i++) {                 
			for(int j=1;j<=n;j++) {
				if(s[i-1] == p[j-1])
					dp[i][j] = 1 + dp[i-1][j-1];
				else	
					dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
			}
		}
		return n - dp[m][n];
    }
};

Method 3: Tabulation Alternate
TC - O(N*N) SC - O(N*N)

class Solution {
public:
    int minInsertions(string s) {
        int n = s.size();
        int dp[n+1][n+1];
        memset(dp, 0, sizeof(dp));
        for (int i=n-1;i>=0;--i)
        {
            dp[i][i] = 1;
            for (int j=i+1;j<n;++j) 
            {
                if (s[i] == s[j]) 
                    dp[i][j] = dp[i+1][j-1] + 2;
                else 
                    dp[i][j] = max(dp[i+1][j], dp[i][j-1]);
            }
        }
        return n - dp[0][n-1];
    }
};