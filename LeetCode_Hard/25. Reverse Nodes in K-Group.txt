Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.
k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.
You may not alter the values in the list's nodes, only nodes themselves may be changed.

Input: head = [1,2,3,4,5], k = 2
Output: [2,1,4,3,5]

Method 1: Using Stack
TC - O(N) SC - O(K)            N - No of nodes

class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        stack<ListNode*>s;
        ListNode *prevToFirst, *lastNext;
        ListNode *node, *curr;
        node = head;
        int count=0, kCount=0;
        while(node) 
        {
            count = 0;
            while(node && count != k) {
                s.push(node);
                node = node->next;
                count++;
            }

            if(count == k)
            {
                lastNext = node;
                curr = s.top();
                if(kCount == 0) {
                    head = curr;
                    kCount++;
                }
                else {
                    prevToFirst->next = curr;
                }

                s.pop();
                while(!s.empty()) {
                    curr->next = s.top();
                    s.pop();
                    curr = curr->next;
                }

                curr->next = lastNext;
                node = curr->next;
                prevToFirst = curr;
            }
        }
        return head;
    }
};

Method 2: Recursive
TC - O(N) SC - O(N/K)

class Solution {
public:
	bool checkLessThank(ListNode* temp, int k) {
		for(int i=0;i<k;i++) {
			if(temp == NULL)
				return true;
            temp = temp->next;
        }
		return false;
	}
    ListNode* reverseKGroup(ListNode* head, int k) {
        ListNode* temp = head;
		if(checkLessThank(temp,k))
			return head;

		ListNode* prev = NULL;
		ListNode* nxt = NULL;
		ListNode* curr = head;
		for(int i=0;i<k;i++)
		{
			nxt = curr->next;
			curr->next = prev;
			prev = curr;
			curr = nxt;
		}

		if(nxt != NULL)
			head->next = reverseKGroup(curr, k);
		return prev;
    }
};

Method 3: Iteration
TC - O(N) SC - O(1)  

class Solution {
public:
	int length(ListNode* head) {
		int count = 0;
		while(head) {
			count++;
			head = head->next;
		}
		return count;
	}
    ListNode* reverseKGroup(ListNode* head, int k) {
        ListNode* dummy = new ListNode(0);
		dummy->next = head;
		ListNode* pre = dummy;

		int len = length(head);
		int groups = len/k;
		for(int i=0;i<groups;i++)
		{
			for(int j=1;j<k;j++)
			{
				ListNode* temp = pre->next;
				pre->next = head->next;
				head->next = head->next->next;
				pre->next->next = temp;
			}
			pre = head;
			head = head->next;
		}
		head = dummy->next;
		delete (dummy);
		return head;
    }
};

