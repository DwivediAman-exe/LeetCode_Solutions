A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.
The path sum of a path is the sum of the node's values in the path.
Given the root of a binary tree, return the maximum path sum of any non-empty path.

Input: root = [-10,9,20,null,null,15,7]
Output: 42
Explanation: The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42.

Method 1:
TC - O(N) SC - O(N) (function call stack space)

class Solution {
public:
	int Util(TreeNode* root, int & result) {
		if(!root)
			return 0;
		
		int left = Util(root->left, result);
		int right = Util(root->right, result);

		int max_straight = max(max(left, right) + root->val, root->val);     // current node is included in maxpath
		int max_caseVal = max(max_straight, root->val + left + right);       // current node is the root of maxPath
		result = max(max_caseVal, result);                                   // storing the maxPath sum

		return max_straight;                                     // returing the max_straight so that others can  be included to check for maxPath 
	}
    int maxPathSum(TreeNode* root) {
        int result = INT_MIN;
		Util(root, result);
		return result;
    }
};