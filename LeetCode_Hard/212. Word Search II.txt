Given an m x n board of characters and a list of strings words, return all words on the board.
Each word must be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.

Input: board = [["o","a","a","n"],["e","t","a","e"],["i","h","k","r"],["i","f","l","v"]], words = ["oath","pea","eat","rain"]
Output: ["eat","oath"]

Method 1: DFS (TLE)
TC - O(W*N*M*4^L) where N = rows in board, M = columns in board, L = Length of word[i], W = no of words
SC - O(L)

class Solution {
public:
    bool isValid(vector<vector<char>>& board, int i, int j, char c) {
        int m = board.size();
        int n = board[0].size();
        if(i<0 || j<0 || i>=m || j>=n || board[i][j]!=c)
            return false;
        return true;
    }
    bool Util(vector<vector<char>>& board, int i, int j, string word) {
        if(word.size() == 0)
            return true;
        
        if(!isValid(board, i, j, word[0]))
            return false;
        
        char c = board[i][j];
        board[i][j] = '*';
        word = word.substr(1);
        bool res = Util(board, i+1, j, word) || Util(board, i, j+1, word) ||                        Util(board, i-1, j, word) || Util(board, i, j-1, word);
        board[i][j] = c;
        return res;
    }
    bool exist(vector<vector<char>>& board, string& word) {
        int m = board.size();
        int n = board[0].size();
        
        for(int i=0;i<m;i++) {
            for(int j=0;j<n;j++) {
                if((board[i][j] == word[0]) && Util(board, i, j, word))
                        return true;
            }
        }
        return false;
    }
    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {
        vector<string>ans;
        for(auto word: words) {
            string x = word;
            if(exist(board, word) == true)
                ans.push_back(x);
        }
        return ans;
    }
};

Method 2: Trie + backtracking
TC - O(N*M+N*M) SC - O(N*W + N*M)

class Solution {    
    struct node{    
        char c;
        int ends;
        string word;
        node *child[26];
    };
    struct node *getNode(char c)   
    {
        node *newnode = new node;
        newnode->c = c;
        newnode->ends = 0;
        newnode->word = "";
        for(int i=0;i<26;++i)
            newnode->child[i] = NULL;
        return newnode;
    }
    node *root = getNode('/'); 
    void insert(string s)
    {
        node *curr=root;
        int index,i=0;
        while(s[i])
        {
            index = s[i]-'a';
            if(curr->child[index]==NULL)
                curr->child[index] = getNode(s[i]);
            
            curr=curr->child[index];
            i+=1;
        }
        curr->ends += 1;
        curr->word = s;
    }
    void solve(vector<vector<char>>& board,int i,int j,int r,int c,vector<string>& ans,node *curr)
    {
        int index = board[i][j]-'a';
        if(board[i][j]=='$' || curr->child[index]==NULL)  
            return;
        
        curr = curr->child[index];
        if(curr->ends > 0)
        {
            ans.push_back(curr->word);
            curr->ends -=1;
        }
        char ch = board[i][j];  
        board[i][j] = '$';  
        
        if(i>0)     
            solve(board,i-1,j,r,c,ans,curr);
        if(i<r-1)   
            solve(board,i+1,j,r,c,ans,curr);
        if(j>0)     
            solve(board,i,j-1,r,c,ans,curr);
        if(j<c-1)   
            solve(board,i,j+1,r,c,ans,curr);
        board[i][j] = ch;    
    }
    
public:
    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {        
        int r=board.size();
        int c=board[0].size();
        
        for(int i=0;i<words.size();++i)
            insert(words[i]);
        
        vector<string> ans;
        for(int i=0;i<r;++i)
        {
            for(int j=0;j<c;++j)
                solve(board,i,j,r,c,ans,root);
        }
        return ans;
    }
};