Given two strings s and t, return the number of distinct subsequences of s which equals t.
A string's subsequence is a new string formed from the original string by deleting some (can be none) of the characters without disturbing the remaining characters' relative positions. (i.e., "ACE" is a subsequence of "ABCDE" while "AEC" is not).
The test cases are generated so that the answer fits on a 32-bit signed integer.

Input: s = "rabbbit", t = "rabbit"
Output: 3
Explanation:
As shown below, there are 3 ways you can generate "rabbit" from S.
rabbbit
rabbbit
rabbbit

class Solution {
public:
    int Util(string& s, string& t, int i, int j, int dp[][1005])
    {
        if(j == t.size()) 
            return 1;
        if(i == s.size()) 
            return 0;
        
        if(dp[i][j] != -1) 
            return dp[i][j];
        
        if(s[i] == t[j])  
            dp[i][j] = Util(s, t, i+1, j+1, dp) + Util(s, t, i+1, j, dp);
        else
            dp[i][j] = Util(s, t, i+1, j, dp);
        
        return dp[i][j];
    }    
    int numDistinct(string s, string t) {
        int dp[1005][1005];
        memset(dp, -1, sizeof(dp));
        return Util(s, t, 0, 0, dp);
    }
};

Method :
TC - O(N*M) SC - O(M)

class Solution {
public:
    int numDistinct(string s, string t) {
        int n = s.length(), m = t.length();
        vector<unsigned long long> dp(m+1, 0);
        dp[0] = 1;
        for (int j = 1; j <= n; j++){
            for (int i = m; i >= 1; i--){
                dp[i] += s[j-1] == t[i-1] ? dp[i-1] : 0;
            }
        }
        return dp[m];
    }   
};