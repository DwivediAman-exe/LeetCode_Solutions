Write a program to solve a Sudoku puzzle by filling the empty cells.

A sudoku solution must satisfy all of the following rules:
Each of the digits 1-9 must occur exactly once in each row.
Each of the digits 1-9 must occur exactly once in each column.
Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.
The '.' character indicates empty cells.

Input: board = [["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]
Output: [["5","3","4","6","7","8","9","1","2"],["6","7","2","1","9","5","3","4","8"],["1","9","8","3","4","2","5","6","7"],["8","5","9","7","6","1","4","2","3"],["4","2","6","8","5","3","7","9","1"],["7","1","3","9","2","4","8","5","6"],["9","6","1","5","3","7","2","8","4"],["2","8","7","4","1","9","6","3","5"],["3","4","5","2","8","6","1","7","9"]]

Method 1: Recursion + Backtracking
TC - O(9^(N*N)) SC - O(1)
class Solution {
public:
    bool isValid(vector<vector<char>>& board, char choice, int row, int col) {
        for(int i=0;i<9;i++) 
        {
            if(board[i][col] == choice || board[row][i] == choice)
                return false;
            if(board[3*(row/3) + i/3][3*(col/3) + i%3] == choice)
                return false;
        }
        return true;
    }
    bool Util(vector<vector<char>>& board) {
        int m = board.size();
        int n = board[0].size();
        
        for(int i=0;i<m;i++) {
            for(int j=0;j<n;j++) {
                if(board[i][j] == '.') {
                    for(char choice='1';choice<='9';choice++) {
                        if(isValid(board, choice, i, j)) {
                            board[i][j] = choice;
                            if(Util(board) == true)
                                return true;
                            else
                                board[i][j] = '.';
                        }    
                    }
                    return false;
                }
            }
        }
        return true;
    }
    void solveSudoku(vector<vector<char>>& board) {
        Util(board);
    }
};