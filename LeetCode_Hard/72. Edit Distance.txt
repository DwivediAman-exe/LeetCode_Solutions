Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.
You have the following three operations permitted on a word:
Insert a character
Delete a character
Replace a character
 
Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')

Method 1: Recursion
TC - O(3^(M*N)) SC - O(M*N)

class Solution {
public:
	int Util(string s1, string s2, int m, int n) {
		if(m == 0)
			return n;
		if(n == 0)
			return m;
		
		if(s1[m-1] == s2[n-1])
			return Util(s1, s2, m-1, n-1);
		else 
			return 1 + min({
				Util(s1, s2, m-1, n),
				Util(s1, s2, m, n-1),
				Util(s1, s2, m-1, n-1)
			});
	}
    int minDistance(string s1, string s2) {
		int m = s1.size();
		int n = s2.size();
		return Util(s1, s2, m, n);
    }
};

Method 2: Memoization
TC - O(M*N) Sc - O(M*N)

class Solution {
public:
	int Util(string s1, string s2, int m, int n, int dp[][501]) {
		if(m == 0)
			return dp[m][n] = n;
		if(n == 0)
			return dp[m][n] =  m;
		
        if(dp[m][n] != -1)
            return dp[m][n];
        
		if(s1[m-1] == s2[n-1])
			dp[m][n] =  Util(s1, s2, m-1, n-1, dp);
		else {
			int insertChar = Util(s1, s2, m, n-1, dp);
			int deleteChar = Util(s1, s2, m-1, n, dp);
			int replaceChar = Util(s1, s2, m-1, n-1, dp);
			dp[m][n] = 1 + min({insertChar, deleteChar, replaceChar});
		}
        return dp[m][n];
	}
    int minDistance(string s1, string s2) {
		int m = s1.size();
		int n = s2.size();
        int dp[501][501];
        memset(dp, -1, sizeof(dp));
		return Util(s1, s2, m, n, dp);
    }
};

Method 3: Tabulation
TC - O(M*N) SC - O(M*N)

class Solution {
public:
    int minDistance(string s1, string s2) {
		int m = s1.size();
		int n = s2.size();
        int dp[m+1][n+1];

		for(int i=0;i<=n;i++) 
			dp[0][i] = i;
		for(int i=0;i<=m;i++) 
			dp[i][0] = i;

		for(int i=1;i<=m;i++)
		{
			for(int j=1;j<=n;j++)
			{
				if(s1[i-1] == s2[j-1])
					dp[i][j] = dp[i-1][j-1];
				else
					dp[i][j] = 1 + min({dp[i][j-1], dp[i-1][j], dp[i-1][j-1]});
			}
		}
		return dp[m][n];
    }
};

Method 4: Space optimised
TC - O(M*N) SC - O(N)

class Solution {
public:
    int minDistance(string s2, string s2) {
        int m = s2.size(), n = s2.size(), pre;
        vector<int> cur(n + 1, 0);
        for(int j=1;j<=n;j++) 
            cur[j] = j;
        
        for(int i=1;i<=m;i++) 
		{
            pre = cur[0];
            cur[0] = i;
            for(int j=1;j<=n;j++) 
			{
                int temp = cur[j];
                if(s2[i - 1] == s2[j - 1]) 
                    cur[j] = pre;
                else 
                    cur[j] = min(pre, min(cur[j - 1], cur[j])) + 1;
                pre = temp;
            }
        }
        return cur[n];
    }
};

