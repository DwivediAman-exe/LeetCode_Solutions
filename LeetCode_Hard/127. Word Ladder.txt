A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:
Every adjacent pair of words differs by a single letter.
Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.
sk == endWord
Given two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.

Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log","cog"]
Output: 5
Explanation: One shortest transformation sequence is "hit" -> "hot" -> "dot" -> "dog" -> cog", which is 5 words long.

Method 1: BFS
TC - O((M^2)*N) where M = size of queue and N = size of our word list
SC - O(M*N) where M = no. of character that we had in our string & N is the size of our wordList.

class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        unordered_set<string> dict(wordList.begin(), wordList.end());
        queue<string>q;
        q.push(beginWord);
        int ans = 1;
        
        while(!q.empty())
        {
            int n = q.size();
            for(int i=0;i<n;i++) 
            {
                string word = q.front();
                q.pop();
                
                if(word == endWord) 
                    return ans;
                
                for(int j=0;j<word.size();j++) 
                {
                    char c = word[j];
                    for(int k=0;k<26;k++) {
                        word[j] = 'a' + k;
                        if(dict.find(word) != dict.end()) {
                            q.push(word);
                            dict.erase(word);
                        }
                    }
                    word[j] = c;
                }
            }
            ans++;
        }
        return 0;
    }
};

Method 2: Bidirectional BFS
TC - O(N^2) where N = size of our word list
SC - O(N) 

class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        unordered_set<string> dict(wordList.begin(), wordList.end()), head, tail, *phead, *ptail;
        if (dict.find(endWord) == dict.end()) 
            return 0;
        
        head.insert(beginWord);
        tail.insert(endWord);
        int ans = 2;
        while(!head.empty() && !tail.empty())
		{
            if(head.size() < tail.size()) {
                phead = &head;
                ptail = &tail;
            } else {
                phead = &tail;
                ptail = &head;
            }

            unordered_set<string> temp;
            for(auto it = phead -> begin(); it != phead -> end(); it++) 
			{    
                string word = *it;
                for(int i = 0; i < word.size(); i++) 
				{
                    char t = word[i];
                    for(int j = 0; j < 26; j++) {
                        word[i] = 'a' + j;
                        if (ptail -> find(word) != ptail -> end()) {
                            return ans;
                        }
                        if (dict.find(word) != dict.end()) {
                            temp.insert(word);
                            dict.erase(word);
                        }
                    }
                    word[i] = t;
                }
            }
            ans++;
            phead -> swap(temp);
        }
        return 0;
    }
};