Given two strings str1 and str2, return the shortest string that has both str1 and str2 as subsequences. If there are multiple valid strings, return any of them.
A string s is a subsequence of string t if deleting some number of characters from t (possibly 0) results in the string s.

Input: str1 = "abac", str2 = "cab"
Output: "cabac"
Explanation: 
str1 = "abac" is a subsequence of "cabac" because we can delete the first "c".
str2 = "cab" is a subsequence of "cabac" because we can delete the last "ac".
The answer provided is the shortest such string that satisfies these properties.

Method 2: Recursion
TC - O(2^(M*N)) SC - O(M*N)

class Solution {
public:
    int LCSUtil(string& s1, string& s2, int m, int n, int dp[][1001]) {
		if(m==0 || n==0)
			return dp[m][n] = 0;
        if(dp[m][n] != -1)
            return dp[m][n];
        
		if(s1[m-1] == s2[n-1])
			dp[m][n] = 1 + LCSUtil(s1, s2, m-1, n-1, dp);
		else
			dp[m][n] = max(LCSUtil(s1, s2, m-1, n, dp), LCSUtil(s1, s2, m, n-1, dp));
			
        return dp[m][n];
    }
    string shortestCommonSupersequence(string s1, string s2) {
        int m = s1.size(), n = s2.size();
        int dp[1001][1001];
        memset(dp, -1, sizeof(dp));
        LCSUtil(s1, s2, m, n, dp);

		int i = m, j = n;
		string ans = "";
		while(i>0 && j>0) 
        {
			if(s1[i-1] == s2[j-1]) {
				ans.push_back(s1[i-1]);
				i--;
				j--;
			}
			else {
				if(dp[i][j-1] > dp[i-1][j]) {
					ans.push_back(s2[j-1]);
					j--;
				}
				else {
					ans.push_back(s1[i-1]);
					i--;
				}
			}
		}
		while(i>0) {
			ans.push_back(s1[i-1]);
			i--;
		}
		while(j>0) {
			ans.push_back(s2[j-1]);
			j--;
		}
		reverse(ans.begin(),ans.end());
		return ans;
    }
};

Method 2: Tabulation
TC - O(M*N) Sc - O(M*N)

class Solution {
public:
    int shortestCommonSupersequence(string s1, string s2) {
        int m = s1.size(), n = s2.size();
        int dp[m+1][n+1];                   
        
		for(int i=0;i<=m;i++)            
			dp[i][0] = 0;
		for(int i=0;i<=n;i++)
			dp[0][i] = 0;

		for(int i=1;i<=m;i++) {              
			for(int j=1;j<=n;j++) {
				if(s1[i-1] == s2[j-1])
					dp[i][j] = 1 + dp[i-1][j-1];
				else	
					dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
			}
		}
		
		int i = m, j = n;
		string ans = "";
		while(i>0 && j>0) {
			if(s1[i-1] == s2[j-1]){
				ans.push_back(s1[i-1]);
				i--;
				j--;
			}
			else {
				if(dp[i][j-1] > dp[i-1][j]){
					ans.push_back(s2[j-1]);
					j--;
				}
				else{
					ans.push_back(s1[i-1]);
					i--;
				}
			}
		}
		while(i>0){
			ans.push_back(s1[i-1]);
			i--;
		}
		while(j>0){
			ans.push_back(s2[j-1]);
			j--;
		}
		reverse(ans.begin(),ans.end());
		return s;
    }
};

Method 3: Alternate
TC - O(M*N) Sc - O(M*N)

class Solution {
    string findLCS(string str1,string str2)
    {
        int len1 = str1.size();
        int len2 = str2.size();
        string dp[len1+1][len2+1];
        
        for(int i=0;i<=len1;++i)
            for(int j=0;j<=len2;++j)
            {
                if(i == 0 || j == 0)
                    dp[i][j] = "";
                else if(str1[i-1] == str2[j-1])
                    dp[i][j] = dp[i-1][j-1]+str1[i-1];
                else
                    dp[i][j] = dp[i][j-1].size() > dp[i-1][j].size() ? dp[i][j-1]:dp[i-1][j];
            }
        return dp[len1][len2];
    }
public:
    string shortestCommonSupersequence(string str1, string str2) {
        string ans = "";
        string lcs = findLCS(str1,str2);
        int p1=0,p2=0;
        for(char c: lcs)
        {
            while(str1[p1]!=c) 
                ans += str1[p1++];
            while(str2[p2]!=c)  
                ans += str2[p2++];
            ans += c;  
            ++p1;
            ++p2;
        }
        ans += str1.substr(p1) + str2.substr(p2);
        return ans;
    }
};