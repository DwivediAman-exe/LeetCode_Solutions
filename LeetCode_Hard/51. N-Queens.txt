The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.
Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.
Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.

Input: n = 4
Output: [[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]
Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above

Method 1: Recursion + Backtracking
TC - O(N!) SC - O(N*N)

class Solution {
public:
	bool isValid(int row,  int col, vector<string> board, int n) {
		int duprow = row;
		int dupcol = col;
		while(row >= 0 && col >= 0) {
			if(board[row][col] == 'Q')
				return false;
				row--;
				col--;
		}
		row = duprow;
		col = dupcol;
		while(col >= 0) {
			if(board[row][col] == 'Q')
				return false;
				col--;
		}
		row = duprow;
		col = dupcol;
		while(row < n && col >= 0) {
			if(board[row][col] == 'Q')
				return false;
				col--;
				row++;
		}
		return true;
	}
	void Util(int col, vector<string>& board, int n, vector<vector<string>>& ans){
		if(col == n) {
			ans.push_back(board);
			return;
		}

		for(int row=0;row<n;row++) {
			if(isValid(row, col, board, n)) {
				board[row][col] = 'Q';
				Util(col+1, board, n, ans);
				board[row][col] = '.';
			}
		}
	}
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>>ans;
		vector<string>board(n,string(n,'.'));
		Util(0, board, n, ans);
		return ans;
    }
};

Method 2: Efficient
TC - O(N!) SC - O(N*N)

class Solution {
public:
	void Util(int col, vector<string>& board, int n, vector<vector<string>>& ans, vector<int>& leftRow, vector<int>& upperDiagonal, vector<int>& lowerDiagonal) {
		if(col == n) {
			ans.push_back(board);
			return;
		}

		for(int row=0;row<n;row++) {
			if(leftRow[row] == 0 && lowerDiagonal[row+col] == 0 && upperDiagonal[n-1+col-row] == 0) {
				board[row][col] = 'Q';
				leftRow[row] = 1;
				lowerDiagonal[row+col] = 1;
				upperDiagonal[n-1+col-row] = 1;
				Util(col+1, board, n, ans, leftRow, upperDiagonal, lowerDiagonal);
				board[row][col] = '.';
				leftRow[row] = 0;
				lowerDiagonal[row+col] = 0;
				upperDiagonal[n-1+col-row] = 0;
			}
		}
	}
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>>ans;
		vector<string>board(n,string(n,'.'));
		vector<int>leftRow(n, 0), upperDiagonal(2*n-1, 0), lowerDiagonal(2*n-1, 0);
		Util(0, board, n, ans, leftRow, upperDiagonal, lowerDiagonal);
		return ans;
    }
};