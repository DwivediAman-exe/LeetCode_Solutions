You are given the head of a singly linked-list. The list can be represented as:
L0 → L1 → … → Ln - 1 → Ln
Reorder the list to be on the following form:
L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …
You may not modify the values in the list's nodes. Only nodes themselves may be changed.

Input: head = [1,2,3,4]
Output: [1,4,2,3]

Method 1: Using vector
TC - O(N) SC - O(N)

class Solution {
public:
    void reorderList(ListNode* head) {        
        vector<ListNode*>v;
        ListNode* curr = head;
        while(curr) {
            v.push_back(curr);
            curr = curr->next;
        }
        
        int l = 1, r = v.size()-1;
        for(int i=0;i<v.size();i++)
        {
            if(i & 1)
                head->next = v[l++];
            else
                head->next = v[r--];
            head = head->next;
        }
        head->next = NULL;
    }
};

Method 2: Using Slow and Fast pointer and spliting list
TC - O(N) SC - O(1)

class Solution {
public:
    ListNode* findMid(ListNode* head) {
        ListNode *slow = head, *fast = head;
        while(fast && fast->next) {
            slow = slow->next;
            fast = fast->next->next;
        }
        return slow;
    }
    ListNode* rev(ListNode* head) {
        ListNode *cur,*nxt,*tmp;
        cur = head;
        nxt = cur->next;
        cur->next = NULL;
        while(nxt) {
            tmp = nxt->next;
            nxt->next = cur;
            cur = nxt;
            nxt = tmp;
        }
        return cur;
    }
    void merge(ListNode* l1, ListNode* l2) {
        ListNode *t1,*t2;
        while(l2->next) {
            t1 = l1->next;
            t2 = l2->next;
            l1->next = l2;
            l2->next = t1;
            l1 = t1;
            l2 = t2;
        }
    }
    void reorderList(ListNode* head) {
        if(!head)
            return;
        ListNode* l2 = findMid(head);
        l2 = rev(l2);
        merge(head, l2);
    }
};