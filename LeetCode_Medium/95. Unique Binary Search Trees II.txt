Given an integer n, return all the structurally unique BST's (binary search trees), which has exactly n nodes of unique values from 1 to n. Return the answer in any order.

Input: n = 3
Output: [[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]

Method 1: Divide and Conquer 
As we have to generate all the possible trees and the total number of possible trees possible is a catalan number which is (4^n)/((n^(3/2))*sqrt(pi)), which makes the time of this algorithm to be O(4^n)

class Solution {
public:
	vector<TreeNode*> genTrees(int start, int end) {
		vector<TreeNode*>ans;      //subtrees possible at this level

		if(start > end) {           // no val available
			ans.push_back(NULL);
			return ans;
		}
		if(start == end) {
			ans.push_back(new TreeNode(start));
			return ans;
		}

		for(int i=start;i<=end;i++)     //more than one val => more subtrees
		{
			auto lsubtrees = genTrees(start,i-1); //left possible subtrees of current subtree (rooted at i)
			auto rsubtrees = genTrees(i+1,end);   //right possible subtrees of current subtree (rooted at i)

			for(auto ls : lsubtrees) {
				for(auto rs: rsubtrees) {
					TreeNode* temp = new TreeNode(i); //make new subtree rooted at i with le and ri as its subtrees
					temp->left = ls;
					temp->right = rs;
					ans.push_back(temp);  // add this subtree for higher nodes
				}
			}
		}
		return ans;
	}
    vector<TreeNode*> generateTrees(int n) {
        if(n==0)
			return {};
		return genTrees(1,n);
    }
};