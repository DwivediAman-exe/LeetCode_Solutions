Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]

Method 1: Recursion + Hashing
TC - O(N!*N) SC - O(N)

class Solution {
public:
	void Util(vector<int>& nums, int freq[], vector<int>& ds, vector<vector<int>>& ans) {
		if(ds.size() == nums.size()) {
			ans.push_back(ds);
			return;
		}
		
		for(int i=0;i<nums.size();i++) {
			if(freq[i] == 0) {
				ds.push_back(nums[i]);
				freq[i] = 1;
				Util(nums, freq, ds, ans);
				freq[i] = 0;
				ds.pop_back();
			}
		}
	}
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>>ans;
		vector<int>ds;
		int freq[nums.size()];
		for(int i=0;i<nums.size();i++)
			freq[i] = 0;
		Util(nums, freq, ds, ans)
		return ans;
    }
};

Method 2: Recursion
TC - O(N!*N) SC - O(N) (function call stack)

class Solution {
public:
	void Util(vector<int>& nums, int index, vector<vector<int>>& ans) {
		if(index == nums.size()) {
			ans.push_back(nums);
			return;
		}
		
		for(int i=index;i<nums.size();i++) {
			swap(nums[i], nums[index]);
            Util(nums, index+1, ans);
            swap(nums[i], nums[index]);
		}
	}
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>>ans;
		vector<int>ds;
		Util(nums, 0, ans);
		return ans;
    }
};

Method 3: Next permutation
TC - O(N!*N) SC - O(1)

class Solution {
public:
    int factorial(int n) {
        int f = 1;
        while(n>1) 
            f *= n--;
        return f;
    }
    void nextPermutation(vector<int>& nums) {
        int n = nums.size(), i, j;
        for (i=n-2;i>=0;i--) {
            if (nums[i] < nums[i+1]) {
                break;
            }
        }
        if (i < 0) {
            reverse(nums.begin(), nums.end());
        } else {
            for (j = n - 1; j > i; j--) {
                if (nums[j] > nums[i]) {
                    break;
                }
            }
            swap(nums[i], nums[j]);
            reverse(nums.begin() + i + 1, nums.end());
        }
    }
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>>ans;
		int n=factorial(nums.size());
        for (int i=0;i<n;i++) {
            ans.push_back(nums);
            nextPermutation(nums);
        }
        return ans;
    }
};