Given a singly linked list, return a random node's value from the linked list. Each node must have the same probability of being chosen.
Implement the Solution class:
Solution(ListNode head) Initializes the object with the head of the singly-linked list head.
int getRandom() Chooses a node randomly from the list and returns its value. All the nodes of the list should be equally likely to be chosen.
 
Input
["Solution", "getRandom", "getRandom", "getRandom", "getRandom", "getRandom"]
[[[1, 2, 3]], [], [], [], [], []]
Output
[null, 1, 3, 2, 2, 3]

Explanation
Solution solution = new Solution([1, 2, 3]);
solution.getRandom(); // return 1
solution.getRandom(); // return 3
solution.getRandom(); // return 2
solution.getRandom(); // return 2
solution.getRandom(); // return 3
// getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning.

Method 1: Fixed-Range Sampling
TC - init() - O(N) and getRandom() - O(1)
SC - O(1)

class Solution {
private:
	int len;
	ListNode* head;
public:
    Solution(ListNode* head) {
		len = 0;
		this->head = head;
		ListNode* curr = head;
        while(curr) {
			len++;
			curr = curr->next;
		}
    }
    int getRandom() {
        int t = rand()%len;
		ListNode* curr = head;
		while(t) {
			t--;
			curr = curr->next;
		}
		return curr->val;
    }
};

Method 2: Reservoir Sampling
TC - init() - O(1) and getRandom() - O(N)
SC - O(1)

class Solution {
private:
	ListNode* head;
public:
    Solution(ListNode* head) {
        this->head = head;
    }
    int getRandom() {
        ListNode* curr = head;
        int res = 0, n = 1;
        while (curr) {
            if (rand() % n == 0) {
                res = curr->val;
            }
            n++;
            curr = curr->next;
        }
        return res;
    }
};