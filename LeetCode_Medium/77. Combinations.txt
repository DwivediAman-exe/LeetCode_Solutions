Given two integers n and k, return all possible combinations of k numbers out of the range [1, n].
You may return the answer in any order.

Input: n = 4, k = 2
Output:
[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]

Method 1: Backtracking
TC - O(N!/(k-1)!) ~ O(N^K) SC - O(N-K)

class Solution {
public:
    void Util(int index, int k, int n, vector<int>& ds, vector<vector<int>>& ans) {
        if(ds.size() == k) {
            ans.push_back(ds);
            return;
        }
        
        for(int i=index;i<=n-(k-ds.size())+1;i++) {
            ds.push_back(i);
            Util(i+1, k, n, ds, ans);
            ds.pop_back();
        }
    }
    vector<vector<int>> combine(int n, int k) {
        vector<vector<int>>ans;
        vector<int>ds;
        Util(1, k, n, ds, ans);
        return ans;
    }
};

Method 2: Iterative

class Solution {
public:
    vector<vector<int>> combine(int n, int k) {
        vector<vector<int>> res;
        vector curr(k, 0);
        int i = 0;
        while (i >= 0) {
            curr[i]++;
            if (curr[i]>n - k + i + 1) 
                --i;
            else if (i == k - 1) 
                res.push_back(curr);
            else{
                i++;
                curr[i] = curr[i - 1];
            }
        }
    return res;
    }
};