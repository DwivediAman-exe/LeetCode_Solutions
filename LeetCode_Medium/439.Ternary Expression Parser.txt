class Solution {
public:
    string parseTernary(string expression) {
        stack<char> stk;
        for(int i= expression.length()-1; i>= 0; i--){
            char c= expression[i]; //current condition
            if(!stk.empty() && stk.top() == '?'){
                stk.pop(); //pop out the '?'
                char first= stk.top();
                stk.pop(); //pop out first digit
                stk.pop(); //pop out ':'
                char second= stk.top();
                stk.top()= (c== 'T')? first: second;
            }
            else
                stk.push(c);
        }
        
        return string(1, stk.top());
    }
};

Method 2:

class Solution {
 public :
     string parseTernary( string expression) {
         string res = expression;
         while (res.size()> 1 ) 
	 {
             int i = res.find_last_of( " ? " );
             res = res.substr( 0 , i- 1 ) + string ( 1 , res[i- 1 ] == ' T ' ? res[i + 1 ]: res[i + 3 ]) + res.substr(i + 4 );
         }
         return res;
    }
};