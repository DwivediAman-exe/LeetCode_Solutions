Given an integer array nums that may contain duplicates, return all possible subsets (the power set).
The solution set must not contain duplicate subsets. Return the solution in any order.

Input: nums = [1,2,2]
Output: [[],[1],[1,2],[1,2,2],[2],[2,2]]

Method 1: Recursion + Backtracking + Extra space
TC - O((2^N)*N) SC - O(N)

class Solution {
public:
    void Util(vector<int>& nums, int index, vector<int>& ds, vector<vector<int>>& ans) {
        ans.push_back(ds);
        
        unordered_set<int>s;
        for(int i=index;i<nums.size();i++) {
            if(s.find(nums[i])!=s.end())
                continue;
            s.insert(nums[i]);
            ds.push_back(nums[i]);
            Util(nums, i+1, ds, ans);
            ds.pop_back();
        }
    }
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        vector<vector<int>>ans;
        vector<int>ds;
        sort(nums.begin(), nums.end());
        Util(nums, 0, ds, ans);
        return ans;
    }
};

Method 2: Recursion + Backtracking + Without set
TC - O((2^N)*N) SC - O(N)

class Solution {
public:
    void Util(vector<int>& nums, int index, vector<int>& ds, vector<vector<int>>& ans) {
        ans.push_back(ds);
        
        for(int i=index;i<nums.size();i++) {
            if(i > index && nums[i] == nums[i-1]) 
                continue;
            ds.push_back(nums[i]);
            Util(nums, i+1, ds, ans);
            ds.pop_back();
        }
    }
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        vector<vector<int>>ans;
        vector<int>ds;
        sort(nums.begin(), nums.end());
        Util(nums, 0, ds, ans);
        return ans;
    }
};

Method 3: Iterative Bitmasking
TC - O((2^N)*N) SC - O(N)

class Solution {
public:
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        int size = pow(2,nums.size());
        vector<vector<int>>ans;
        set<vector<int>>s;
        for(int i=0;i<size;i++)
        {
            vector<int>v;
            for(int j=0;j<nums.size();j++)
            {
                if(i & (1<<j))
                    v.push_back(nums[j]);
            }
            sort(v.begin(),v.end());
            if(s.find(v)==s.end())
            {
                ans.push_back(v);
                s.insert(v);
            }   
        }
        return ans;
    }
};