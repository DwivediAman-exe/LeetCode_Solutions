You are given the head of a linked list. Delete the middle node, and return the head of the modified linked list.

The middle node of a linked list of size n is the ⌊n / 2⌋th node from the start using 0-based indexing, where ⌊x⌋ denotes the largest integer less than or equal to x.
For n = 1, 2, 3, 4, and 5, the middle nodes are 0, 1, 1, 2, and 2, respectively.

Input: head = [1,3,4,7,1,2,6]
Output: [1,3,4,1,2,6]
Explanation:
The above figure represents the given linked list. The indices of the nodes are written below.
Since n = 7, node 3 with value 7 is the middle node, which is marked in red.
We return the new list after removing this node. 

Method 1: Naive method
TC - O(N) SC - O(N)

class Solution {
public:
	ListNode* deleteMiddle(ListNode* head) {
		if(!head || !head->next)
			return NULL;
		
		ListNode* temp=head;
		int len = 1;
		while(temp->next != NULL) {
			len++;
			temp = temp->next;
		}
        
		temp = head;
		for(int i=1;i<len/2 && temp->next!=NULL;i++)
			temp = temp->next; 
		
		ListNode* cur = temp->next;
		temp->next = temp->next->next;
		delete cur;
		return head;
	}
};

Method 2: Slow and Fast pointers
TC - O(N) SC - O(1)

class Solution {
public:
    ListNode* deleteMiddle(ListNode* head) {
        if(!head->next)
            return NULL;
        
        ListNode* slow = head, *fast = head->next->next;
        while(fast && fast->next) {
            slow = slow->next;
            fast = fast->next->next;
        }
        
        ListNode* temp = slow->next;
        slow->next = slow->next->next;
        delete temp;
        return head;
    }
};