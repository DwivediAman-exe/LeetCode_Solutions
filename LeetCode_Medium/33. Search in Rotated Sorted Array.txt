There is an integer array nums sorted in ascending order (with distinct values).
Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].
Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.
You must write an algorithm with O(log n) runtime complexity.

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4

Method 1: Linear search
TC - O(N) SC - O(1)

Method 2: Binary search (two pass)
TC - O(LogN) SC - O(1)

class Solution {
    int find_pivot(vector<int>& nums,int left,int right)
    {
        if(nums[left] < nums[right])
            return 0;
        
        int mid;
        //Iterative binary search
        while(left<right)
        {
            mid = (left+right)/2;
            if(nums[mid]>nums[mid+1])
                return mid;
            else if(nums[mid]<nums[0])
                right = mid;
            else
                left = mid+1;
        }
        return mid;
    }
    
    int binary_search(vector<int>& nums,int left,int right,int target)
    {
        int mid;
        //Iterative binary search
        while(left<=right)
        {
            mid = (left+right)/2;
            if(nums[mid]==target)
                return mid;
            else if(nums[mid]>target)
                right = mid-1;
            else
                left = mid+1;
        }
        return -1;
    }
public:
    int search(vector<int>& nums, int target) {
        //For Fast I/O in C++
        ios_base::sync_with_stdio(false);
        cin.tie(NULL);
        int n = nums.size();
        if(n==0)
            return -1;
        else if(n==1)
            return nums[0]==target?0:-1;
        
        int pivot = find_pivot(nums,0,n-1);
        if(nums[pivot]==target)
            return pivot;
        
        return target>nums[n-1]?binary_search(nums,0,pivot,target):binary_search(nums,pivot+1,n-1,target);
    }
};

Method 3: Binary search (one pass)
TC - O(LogN) SC - O(1)

class Solution {
public:
    int search(vector<int>& num, int target) {
        int n = num.size();
        int low = 0;
        int high = n - 1;
        while(low <= high)
        {
            int mid = low + (high-low)/2;
            if(num[mid] == target)
                return mid;
            else if(num[low] <= num[mid]) {
                if(target >= num[low] && target <= num[mid]) 
                    high = mid-1;
                else
                    low = mid+1;
            }
            else {
                if(target >= num[mid] && target <= num[high]) 
                    low = mid+1;
                else
                    high = mid-1;
            }
        }
        return -1;
    }
};