Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.
If target is not found in the array, return [-1, -1].
You must write an algorithm with O(log n) runtime complexity.

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]

Method 1: Linear search
TC - O(N) SC - O(1)

class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int x=-1,y=-1;
        for(int i=0;i<nums.size();i++)
        {
            if(nums[i]==target) {
                x=i;break;
            }
        }
        for(int i=nums.size()-1;i>=0;i--)
        {
            if(nums[i]==target) {
                y=i;break;
            }
        }
        return {x,y};
    }
};

Method 2: Binary search
TC - O(LogN) SC - O(1)

class Solution {
public:
    int firstUtil(vector<int>& arr, int target) {
        int low = 0;
        int high = arr.size() - 1;
        while(low <= high)
        {
            int mid = low + (high-low)/2;
            if(arr[mid] > target)
                high = mid - 1;
			else if(arr[mid] < target)
				low = mid + 1;
			else {
				if(mid == 0 || arr[mid-1] != arr[mid])
					return mid;
				else
					high = mid - 1;
			}
        }
		return -1;
    }
	int secondUtil(vector<int>& arr, int target) {
        int low = 0;
        int high = arr.size() - 1;
        while(low <= high)
        {
            int mid = low + (high-low)/2;
            if(arr[mid] > target)
                high = mid - 1;
			else if(arr[mid] < target)
				low = mid + 1;
			else {
				if(mid == arr.size()-1 || arr[mid+1] != arr[mid])
					return mid;
				else
					low = mid + 1;
			}
        }
		return -1;
    }
    vector<int> searchRange(vector<int>& nums, int target) {
        int x = firstUtil(nums, target);
        cout<<x<<endl;
		int y = secondUtil(nums, target);
		return {x, y};
    }
};