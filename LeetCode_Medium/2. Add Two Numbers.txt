You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.

Method 1:
TC - O(N + M) SC - O(N + M) (Space of two linkedlist)

class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* result = new ListNode();
        ListNode* ptr = result;
        int carry = 0;
        
        while(l1 || l2 || carry)
        {
            int sum = 0;
            if(l1 != NULL) {
                sum += l1->val;
                l1 = l1->next;
            }
            if(l2 != NULL) {
                sum += l2->val;
                l2 = l2->next;
            }
            
            sum += carry;
            ptr->next = new ListNode(sum % 10);
            ptr = ptr->next;
            carry = sum/10;
        }
        return result->next;
    }
};