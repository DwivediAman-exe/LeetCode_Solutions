You are given two linked lists: list1 and list2 of sizes n and m respectively.
Remove list1's nodes from the ath node to the bth node, and put list2 in their place.
The blue edges and nodes in the following figure indicate the result:
Build the result list and return its head.

Input: list1 = [0,1,2,3,4,5], a = 3, b = 4, list2 = [1000000,1000001,1000002]
Output: [0,1,2,1000000,1000001,1000002,5]
Explanation: We remove the nodes 3 and 4 and put the entire list2 in their place. The blue edges and nodes in the above figure indicate the result.

Method 1:
TC - O(N+M) SC - O(1)

class Solution {
public:
    ListNode* mergeInBetween(ListNode* l1, int a, int b, ListNode* l2) {
        ListNode* curr = l1;
        int i = 0;
        while(i < a-1) {
            curr = curr->next;
            i++;
        }
        ListNode* temp = curr->next;
        curr->next = l2;
        i = 0;
        while(i < b-a) {
            temp = temp->next;
            i++;
        }
        while(l2->next) {
            l2 = l2->next;
        }
        l2->next = temp->next;
        return l1;
    }
};