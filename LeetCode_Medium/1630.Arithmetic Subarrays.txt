Method 1:

class Solution {
public:
    vector<bool> checkArithmeticSubarrays(vector<int>& nums, vector<int>& l, vector<int>& r) {
        vector<bool>ans;
        for(int i=0;i<l.size();i++)
        {
            if(r[i]-l[i]<1)
            {
                ans.push_back(false);continue;
            }
            vector<int>v;
            for(int j=l[i];j<=r[i];j++)
                v.push_back(nums[j]);

            sort(v.begin(),v.end());
            int x=v[1]-v[0];
            bool flag=true;
            for(int j=2;j<v.size();j++)
            {
                if(x!=(v[j]-v[j-1]))
                {
                    flag=false;
                    break;
                }
            }
            if(flag)
                ans.push_back(true);
            else
                ans.push_back(false);
        }
        return ans;
    }
};

Method 2:

class Solution {
public:
    vector<bool> checkArithmeticSubarrays(vector<int>& n, vector<int>& l, vector<int>& r) {
    vector<bool>res;
    for (int i=0;i<l.size();++i)
    {
        int mn=INT_MAX, mx=INT_MIN;
        int len=r[i]-l[i]+1, j=l[i];
        for (int j=l[i];j<=r[i];++j)
        {
            mn = min(mn,n[j]);
            mx = max(mx,n[j]);
        }
        if (mx == mn)
            res.push_back(true);
        else if ((mx - mn) % (len - 1))
             res.push_back(false);
        else
        {
            vector<bool>diffs(len);
            int pat = (mx - mn) / (len - 1);
            for (; j <= r[i]; ++j)
            {
                if ((n[j] - mn) % pat || diffs[(n[j] - mn) / pat])
                    break;
                diffs[(n[j] - mn) / pat] = true;
            }
            res.push_back(j > r[i]);
        }
    }
    return res;
    }
};