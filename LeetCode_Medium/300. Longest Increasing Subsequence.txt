Given an integer array nums, return the length of the longest strictly increasing subsequence.
A subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. For example, [3,6,2,7] is a subsequence of the array [0,3,1,6,2,2,7].

Input: nums = [10,9,2,5,3,7,101,18]
Output: 4
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.

Method 1: Dynammic Programming
TC - O(N*N) SC - O(N) 

class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        int n = nums.size();
        int dp[n];
        int ans = 1;
        for(int i=0;i<n;i++) 
        {
            dp[i] = 1;
            for(int j=0;j<i;j++) 
            {
                if(nums[j] < nums[i]) {
                    dp[i] = max(dp[i], dp[j]+1);
                    ans = max(ans, dp[i]);
                }
            }
        }
        return ans;
    }
};

Method 2: Binary Search
TC - O(N*LogN) SC - O(N) 

class Solution {
public:
	int ceilIdx(vector<int>tail, int l, int r, int x) {
		while(r > l) {
			int m = l + (r-l)/2;
			if(tail[m] >= x)
				r = m;
			else
				l = m+1;
		}
		return r;
	}
    int lengthOfLIS(vector<int>& nums) {
        int n = nums.size();
		vector<int>tail;
		tail.push_back(nums[0]);
		int len = 1;
        for(int i=0;i<n;i++) 
        {
            if(nums[i] > tail[len-1]) {
				tail.push_back(nums[i]);
				len++;
			}
			else {
				int idx = ceilIdx(tail, 0, len-1, nums[i]);
				tail[idx] = nums[i];
			}
        }
        return len;
    }
};