Given a string s, return the longest palindromic substring in s.

Input: s = "babad"
Output: "bab"
Explanation: "aba" is also a valid answer.

Method 1: Brute force by findind all the substring and checking for palindrome
TC - O(N^3)  SC - O(1)                    (TLE)

Method 2: Dynammic Programming
TC - O(N*N) SC - O(N*N)

class Solution {
public:
    string longestPalindrome(string s) {
        int n = s.size();
		bool dp[n][n];
		memset(dp, false, sizeof(dp));

		int maxlength = 1;
		for(int i=0;i<n;i++)
			dp[i][i] = true;

		int start = 0;
		for(int i=0;i<n-1;i++) {
			if(s[i] == s[i+1]) {
				dp[i][i+1] = true;
				start = i;
				maxlength = 2;
			}
		}

		for(int k=3;k<=n;k++) {
			for(int i=0;i<n-k+1;i++) {
				int j = i + k - 1;
				if(dp[i+1][j-1] == true && s[i] == s[j]) {
					dp[i][j] = true;
					if(k > maxlength) {
						maxlength = k;
						start = i;
					}
				}
			}
		}
        string ans = "";
        for(int i=start;i<=(start+maxlength-1);i++)
            ans += s[i];
		return ans;
    }
};

Method 3: Expand Around Center
TC - O(N*N) SC - O(1)

class Solution {
public:
    void Util(string s, int low, int high, int& start, int& maxLength) {
        while(low >= 0 && high < s.size() && s[low] == s[high]) {
            if(maxLength < high-low+1) {
                maxLength = high - low + 1;
                start = low;
            }
            --low;
            ++high;
        }
    }
    string longestPalindrome(string s) {
        int maxLength = 1;
		int start = 0;
		string ans = "";
		int n = s.size();
		int low, high;

		for(int i=1;i<n;i++)
		{
			low = i-1;                       // odd length
			high = i+1;
            Util(s, low, high, start, maxLength);

			low = i-1;                         // even
			high = i;
			Util(s, low, high, start, maxLength);
		}
        if(maxLength == 1)
            ans += s[0];
        else {
            for(int i=start;i<(start+maxLength);i++)
                ans += s[i];
        }
        return ans;
    }
};