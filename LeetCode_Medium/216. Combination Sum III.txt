Find all valid combinations of k numbers that sum up to n such that the following conditions are true:
Only numbers 1 through 9 are used.
Each number is used at most once.
Return a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.

Input: k = 3, n = 7
Output: [[1,2,4]]
Explanation:
1 + 2 + 4 = 7
There are no other valid combinations.

Method 1: Bactracking
TC - O(K*C(9,K)) SC - O(K)

class Solution {
public:
    void Util(vector<vector<int>> &ans, vector<int> &ds, int start, int k, int target) {
        if(target == 0 && k == 0){
            ans.push_back(ds);
            return;
        }

        for(int i=start;i<=10-k&&i<=target;i++){
            ds.push_back(i);
            Util(ans,ds,i+1,k-1,target-i);
            ds.pop_back();
        }
    }
    vector<vector<int>> combinationSum3(int k, int n) {
        vector<vector<int>> ans;
        vector<int> ds;
        Util(ans, ds, 1, k, n);
        return ans;
    }
};