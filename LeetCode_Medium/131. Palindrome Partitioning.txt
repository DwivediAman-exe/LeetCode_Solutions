Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s.
A palindrome string is a string that reads the same backward as forward.

Input: s = "aab"
Output: [["a","a","b"],["aa","b"]]

Method 1: Bactracking
TC - O(N*2^N) SC - O(N)

class Solution {
public:
	bool isPalindrome(const string& s, int start, int end) {
        while(start <= end) 
            if(s[start++] != s[end--])
                return false;
        return true;
    }
	void Util(int index, string& s, vector<string>& ds, vector<vector<string> >& ret) {
        if(index == s.size()) {
            ret.push_back(ds);
            return;
        }

        for(int i=index;i<s.size();++i) {
            if(isPalindrome(s, index, i)) {
                ds.push_back(s.substr(index, i - index + 1));
                Util(i+1, s, ds, ret);
                ds.pop_back();
            }
        }
    }
    vector<vector<string>> partition(string s) {
        vector<vector<string>>ans;
        if(s.empty()) 
			return ans;
        vector<string> ds;
        Util(0, s, ds, ans);
        return ans;
    }
};