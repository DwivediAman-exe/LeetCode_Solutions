Given an integer array nums of unique elements, return all possible subsets (the power set).
The solution set must not contain duplicate subsets. Return the solution in any order.

Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]

Method 1: Recursion + Backtracking
TC - O((2^N)*N) SC - O(N)

class Solution {
public:
    void Util(vector<int>& nums, int index, vector<int>& ds, vector<vector<int>>& ans) {
        ans.push_back(ds);
        
        for(int i=index;i<nums.size();i++) {
            ds.push_back(nums[i]);
            Util(nums, i+1, ds, ans);
            ds.pop_back();
        }
    }
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>>ans;
        vector<int>ds;
        Util(nums, 0, ds, ans);
        return ans;
    }
};

Method 2: Iterative
TC - O(2^N) SC - O(1)

class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>>ans = {{}};
        for(int num : nums) 
        {
            int n = ans.size();
            for(int i=0;i<n;i++) 
            {
                ans.push_back(ans[i]); 
                ans.back().push_back(num);
            }
        }
        return ans;
    }
}; 
