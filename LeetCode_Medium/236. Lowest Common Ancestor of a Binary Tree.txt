Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.
According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”

Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
Output: 3
Explanation: The LCA of nodes 5 and 1 is 3.

Method 1: Tree Traversal
TC - O(N) SC - O(N)

class Solution {
public:
    bool findPath(TreeNode* root, TreeNode* dest, vector<TreeNode*> &path1) {
        if(!root)
            return false;
        
        path1.push_back(root);
        if(root->val == dest->val) 
            return true;

        if((root->left && findPath(root->left, dest, path1)) ||                                     (root->right && findPath(root->right, dest, path1)))
            return true;
           
        path1.pop_back();
        return false;   
    }
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        vector<TreeNode*>path1, path2;
        findPath(root, p, path1);
        findPath(root, q, path2);
        
        int n = min(path1.size(), path2.size());
        for(int i=1;i<n;i++)
            if(path1[i] != path2[i])
                return path1[i-1];
        
        return path1[n-1];
    }
};

Method 2: Efficient Solution
TC - O(N) SC - O(N)

class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(!root)
            return NULL;

        if(root->val == p->val || root->val == q->val)
            return root;

        TreeNode* lca1 = lowestCommonAncestor(root->left, p, q);
        TreeNode* lca2 = lowestCommonAncestor(root->right, p, q);

        if(lca1 && lca2)
            return root;

        if(lca1)
            return lca1;
        else
            return lca2;
    }
};