Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.
A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.
For example, "ace" is a subsequence of "abcde".
A common subsequence of two strings is a subsequence that is common to both strings.

Input: text1 = "abcde", text2 = "ace" 
Output: 3  
Explanation: The longest common subsequence is "ace" and its length is 3.

Method 1: Find out all subseq and find the largest
TC - (2^N) N - length of string

Method 2: Recursion
TC - O(2^(M*N)) SC - O(M*N)

class Solution {
public:
    int Util(string s1, string s2, int m, int n) {
		if(m==0 || n==0)
			return 0;
		if(s1[m-1] == s2[n-1])
			return 1 + Util(s1, s2, m-1, n-1);
		else
			return max(0+Util(s1, s2, m-1, n),0+Util(s1, s2, m, n-1));
    }
    int longestCommonSubsequence(string s1, string s2) {
        int m = s1.size(), n = s2.size();
        return Util(s1, s2, m, n);
    }
};

Method 3: Memoization
TC - O(M*N) Sc - O(M*N)

class Solution {
public:
    int Util(string& s1, string& s2, int m, int n, int dp[][1001]) {
		if(m==0 || n==0)
			return dp[m][n] = 0;
        if(dp[m][n] != -1)
            return dp[m][n];
        
		if(s1[m-1] == s2[n-1])
			dp[m][n] = 1 + Util(s1, s2, m-1, n-1, dp);
		else
			dp[m][n] = max(0+Util(s1, s2, m-1, n, dp),0+Util(s1, s2, m, n-1, dp));
			
        return dp[m][n];
    }
    int longestCommonSubsequence(string s1, string s2) {
        int m = s1.size(), n = s2.size();
        int dp[1001][1001];
        memset(dp, -1, sizeof(dp));
        return Util(s1, s2, m, n, dp);
    }
};

Method 3: Tabulation
TC - O(M*N) Sc - O(M*N)

class Solution {
public:
    int longestCommonSubsequence(string s1, string s2) {
        int m = s1.size(), n = s2.size();
        int dp[m+1][n+1];                   
        
		for(int i=0;i<=m;i++)            
			dp[i][0] = 0;
		for(int i=0;i<=n;i++)
			dp[0][i] = 0;

		for(int i=1;i<=m;i++) {                 // dp[i][j] = length of lcs s1[0...i-1] and s2[0...j-1]
			for(int j=1;j<=n;j++) {
				if(s1[i-1] == s2[j-1])
					dp[i][j] = 1 + dp[i-1][j-1];
				else	
					dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
			}
		}
		return dp[m][n];
    }
};