Design a Phone Directory which supports the following operations:
get: Provide a number which is not assigned to anyone.
check: Check if a number is available or not.
release: Recycle or release a number.

Example:
// Init a phone directory containing a total of 3 numbers: 0, 1, and 2.
PhoneDirectory directory = new PhoneDirectory(3);

// It can return any available phone number. Here we assume it returns 0.
directory.get();

// Assume it returns 1.
directory.get();

// The number 2 is available, so return true.
directory.check(2);

// It returns 2, the only number that is left.
directory.get();

// The number 2 is no longer available, so return false.
directory.check(2);

// Release number 2 back to the pool.
directory.release(2);

// Number 2 is available again, return true.
directory.check(2);

Method 1:
// init:     Time: O(n), Space: O(n)
// get:      Time: O(1), Space: O(1)
// check:    Time: O(1), Space: O(1)
// release:  Time: O(1), Space: O(1)

class PhoneDirectory {
private:
    int idx;
    vector<int> nums, used;
public:
    PhoneDirectory(int maxNumbers) {
        nums.resize(maxNumbers);
		used.resize(maxNumbers);
		idx = maxNumbers-1; 
		iota(nums.begin(), nums.end(), 0);
    }
    int get() {
        if(idx < 0)
			return -1;
		int num = nums[idx--];
		used[num] = 1;
		return num;
    }
    bool check(int number) {
        return used[number] == 0;
    }
    void release(int number) {
        if(used[number] == 0)
			return;
		nums[++idx] = number;
		used[number] = 0;
    }
};

Method 2: Alternative Solution

class PhoneDirectory {
private:
    int mx;
    queue<int> q;
    unordered_set<int> used;
public:
    PhoneDirectory(int maxNumbers) {
        mx = maxNumbers;
        for (int i = 0; i < maxNumbers; ++i) q.push(i);
    }
    int get() {
        if (q.empty()) return -1;
        int num = q.front(); q.pop();
        used.insert(num);
        return num;
    }
    bool check(int number) {
        return !used.count(number);
    }
    void release(int number) {
        if (!used.count(number)) return;
        used.erase(number);
        q.push(number);
    }
};