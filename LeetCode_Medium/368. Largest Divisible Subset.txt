Given a set of distinct positive integers nums, return the largest subset answer such that every pair (answer[i], answer[j]) of elements in this subset satisfies:
answer[i] % answer[j] == 0, or
answer[j] % answer[i] == 0
If there are multiple solutions, return any of them.

Input: nums = [1,2,3]
Output: [1,2]
Explanation: [1,3] is also accepted.

Method 1: Recursive (TLE)
TC - (N*2^N)

Method 2: Dynammic Programming
TC - (N*LogN + N*N + N) SC - O(N)

class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        int n = nums.size();
        int max_i = 0;
        vector<int>dp(n, 1), pred(n, -1), ans;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<i;j++)
            {
                if((nums[i]%nums[j] == 0) && (dp[j]+1 > dp[i])) {
                    dp[i] = dp[j]+1;
                    pred[i] = j;
                }
            }
            if(dp[i] > dp[max_i])
                max_i = i;
        }
        for(; max_i >= 0; max_i = pred[max_i]) 
            ans.push_back(nums[max_i]);
        return ans;
    }
};