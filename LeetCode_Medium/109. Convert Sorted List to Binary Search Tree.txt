Given the head of a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.
For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

Input: head = [-10,-3,0,5,9]
Output: [0,-3,9,-10,null,5]
Explanation: One possible answer is [0,-3,9,-10,null,5], which represents the shown height balanced BST.

Method 1: Dividing linked list into halfs then making BST
TC - O(N*LogN) SC - O(N)

class Solution {
public:
	TreeNode* makeBST(ListNode* head, ListNode* tail) {
		if(head == tail)
			return NULL;
		
		ListNode* fast = head;
		ListNode* slow = head;
		while(fast != tail && fast->next != tail) {
			slow = slow->next;
			fast = fast->next->next;
		}

		TreeNode* root = new TreeNode(slow->val);
		root->left = makeBST(head, slow);
		root->right = makeBST(slow->next, tail);
		return root;
	}
    TreeNode* sortedListToBST(ListNode* head) {
		return makeBST(head, NULL);
    }
};

Method 2: Converting linked list into array then making BST
TC - O(N) SC - O(N)

class Solution {
public:
	TreeNode* makeBST(vector<int>& nums, int low, int high) {
		if(low > high)
			return NULL;
		
		int mid = low + (high-low)/2;
		TreeNode* root = new TreeNode(nums[mid]);

		root->left = makeBST(nums, low, mid-1);
		root->right = makeBST(nums, mid+1, high);
		return root;
	}
    TreeNode* sortedListToBST(ListNode* head) {
		vector<int>nums;
		ListNode* curr = head;
		while(curr) {
			nums.push_back(curr->val);
			curr = curr->next;
		}
		int n = nums.size();
		return makeBST(nums, 0, n-1);
    }
};

Method 3: Constructing BT from leaves to root In-order Traversal
TC - O(N) SC - O(N)

class Solution {
public:
    int listCount(ListNode* head) {
        int length = 0;
        for(ListNode* curr=head;curr;curr=curr->next)
          length++;
        return length;
    }
    TreeNode* linearSolution(ListNode*& head, int n) {
        if(n == 0)
            return NULL;
        
        TreeNode *left = linearSolution(head, n/2);
        
        TreeNode *root = new TreeNode(head->val);
        root->left = left;
        head = head->next;
        
        root->right = linearSolution(head, n - n/2 - 1);
        return root;
    }
    TreeNode* sortedListToBST(ListNode* head) {
        if(!head)
            return NULL;
        if(!head->next)
            return new TreeNode(head->val);
        int n_nodes = listCount(head);
        return linearSolution(head, n_nodes);
    }
};