Given the head of a linked list, return the list after sorting it in ascending order.

Input: head = [4,2,1,3]
Output: [1,2,3,4]

Method 1: Merge Sort
TC - O(N*LogN) SC - (LogN)

class Solution {
public:
    ListNode* merge(ListNode* list1, ListNode* list2) {
        ListNode dummyHead(0);
        ListNode* ptr = &dummyHead;
        while (list1 && list2) {
            if (list1->val < list2->val) {
                ptr->next = list1;
                list1 = list1->next;
            } else {
                ptr->next = list2;
                list2 = list2->next;
            }
            ptr = ptr->next;
        }
        if(list1)
            ptr->next = list1;
        else
            ptr->next = list2;
        return dummyHead.next;
    }
    ListNode* getMid(ListNode* head) {
        ListNode* midPrev = NULL;
        ListNode* slow = head, *fast = head;
        while(fast && fast->next) {
            midPrev = slow;
            slow = slow->next;
            fast = fast->next->next;
        }
        ListNode* mid = midPrev->next;
        midPrev->next = nullptr;
        return mid;
    }
    ListNode* sortList(ListNode* head) {
        if (!head || !head->next)
            return head;
        
        ListNode* mid = getMid(head);
        ListNode* left = sortList(head);
        ListNode* right = sortList(mid);
        
        return merge(left, right);
    }
};


Method 2: Insertion Sort
TC - O(N*N) SC - (1)

class Solution {
public:
    ListNode* insertionSortList(ListNode* head) {
        ListNode dummy(INT_MIN), *pre(&dummy), *next(NULL);
        dummy.next = head;
        while(head)
		{
            pre = &dummy;
            if(head && head->next && head->val > head->next->val)
            {
                while(pre && pre->next && pre->next->val < head->next->val) {
                    pre = pre->next;
                }
                next = pre->next;
                pre->next = head->next;
                head->next = head->next->next;
                pre->next->next = next;
            } else {
                head = head->next;
            }
        }
        return dummy.next;
    }
};