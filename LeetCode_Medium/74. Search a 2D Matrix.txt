Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:
Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
 
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true

Method 1: Linear Search
TC - O(N*M) SC - O(1)

Method 2: Binary Search at each row
TC - O(N*LogM) SC - O(1)        M = column, N = rows

class Solution {
public:
    bool Util(vector<int>& arr, int target) {
        int low = 0, high = arr.size()-1;
        while(high >= low) {
            int mid = low + (high-low)/2;
            if(arr[mid] == target)
                return true;
            if(arr[mid] > target)
                high = mid-1;
            else
                low = mid+1;
        }
        return false;
    }
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        for(auto arr: matrix)
            if(Util(arr, target))
                return true;
    
        return false;
    }
};

Method 3: Alternate Observation based
TC - O(N + M) SC - O(1)        M = column, N = rows

class Solution {   
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int n = matrix.size();
        int m = matrix[0].size();
        int i = 0, j = m-1;
        while(i < n && j >= 0)
        {
            if(matrix[i][j] == target)
                return true;
            if(matrix[i][j] > target)
                j--;
            else
                i++;
        }
        return false;
    }
};

Method 4: Binary search on whole Matrix
TC - O(Log(N*M)) SC - O(1)        M = column, N = rows

class Solution {   
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int m = matrix.size(), n = matrix[0].size();
        int low = 0;
        int high = m*n - 1;
        while(low <= high)
        {
            int mid = low + (high-low)/2;
            if(matrix[mid/m][mid%m] == target)
                return true;
            if(matrix[mid/m][mid%m] > target)
                high = mid-1;
            else
                low = mid+1;
        }
        return false;
    }
};