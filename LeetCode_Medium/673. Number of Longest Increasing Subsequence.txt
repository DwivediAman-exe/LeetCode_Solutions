Given an integer array nums, return the number of longest increasing subsequences.
Notice that the sequence has to be strictly increasing.

Input: nums = [1,3,5,4,7]
Output: 2
Explanation: The two longest increasing subsequences are [1, 3, 4, 7] and [1, 3, 5, 7].

Method 1: Dynammic Programming
TC - O(N*N) SC - O(N*N)

class Solution {
public:
    int findNumberOfLIS(vector<int>& nums) {
        int n = nums.size();
        int dp[n];
        int count[n];
        int max_len = 1;
        
        for(int i=0;i<n;i++)
        {
            dp[i] = 1;
            count[i] = 1;
            for(int j=0;j<i;j++) {
                if(nums[j] < nums[i]) {
                    if(dp[j]+1 > dp[i]) {
                        dp[i] = dp[j] + 1;
                        count[i] = count[j];
                    }
                    else if(dp[j]+1 == dp[i]) 
                        count[i] += count[j];
                }
            }
            max_len = max(max_len, dp[i]);
        }
        
        int ans = 0;
        for(int i=0;i<n;i++)
            if(dp[i] == max_len)
                ans += count[i];
            
        return ans;
    }
};