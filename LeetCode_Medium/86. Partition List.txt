Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.
You should preserve the original relative order of the nodes in each of the two partitions.

Input: head = [1,4,3,2,5,2], x = 3
Output: [1,2,2,4,3,5]

Method 1: Iterative
TC - O(N) SC - O(1)

class Solution {
public:
    ListNode* partition(ListNode* head, int x) {
        ListNode* fdummy = new ListNode(0);
        ListNode* bdummy = new ListNode(0);
        ListNode* front = fdummy;
        ListNode* back = bdummy;
        ListNode* curr = head;
        while(curr)
        {
            if(curr->val < x) {
                front->next = curr;
                front = front->next;
            }
            else {
                back->next = curr;
                back = back->next;
            }
            curr = curr->next;
        }
        back->next = NULL;
        front->next = bdummy->next;
        return fdummy->next;
    }
};