You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Input: l1 = [7,2,4,3], l2 = [5,6,4]
Output: [7,8,0,7]

Method 1: Stack
TC - O(max(N,M)) SC - O(max(N,M))

class Solution {
public:
    void insertInStack(stack<int>& s, ListNode* head) {
        while(head) {
            s.push(head->val);
            head = head->next;
        }
    }
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        stack<int>s1, s2;
        insertInStack(s1, l1);
        insertInStack(s2, l2);
        
        int carry = 0;
        ListNode* head = NULL;
        while(!s1.empty() || !s2.empty()) {
            int sum = 0;
            if(!s1.empty()) {
                sum += s1.top(); s1.pop();
            }
            if(!s2.empty()) {
                sum += s2.top(); s2.pop();
            }
            sum += carry;
            carry = sum/10;
            
            ListNode* temp = new ListNode(sum%10);
            
            if(!head) 
                head = temp;
            else {
                temp->next = head;
                head = temp;
            }
        }
        
        if(carry == 1) {
            ListNode * temp = new ListNode(1);
            temp->next = head;
            head = temp;
        }
        return head;
    }
};

Method 1: Recursion
TC - O(max(N,M)) SC - O(1) (ignoring dunction call stack space)

class Solution {
public:
	int length(ListNode* head) {
        int len = 0;
        while(head) {
            len++;
            head = head->next;
        }
        return len;
    }
    ListNode* add_aux(ListNode* l1, ListNode* l2, int k, int& carry) {
        if(l2 == NULL)
			return NULL;
        ListNode* p = new ListNode(l1->val);
        if (k > 0) 
            p->next = add_aux(l1->next, l2, k-1, carry);
        else {
            p->val += l2->val;
            p->next = add_aux(l1->next, l2->next, k, carry);
        }
        p->val += carry;
        carry = p->val/10;
        p->val %= 10;
        return p;
    }
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        int n1 = length(l1), n2 = length(l2);
        int carry = 0;
        ListNode* h = new ListNode(1);
        h->next = n1 > n2 ? add_aux(l1, l2, n1-n2, carry) : add_aux(l2, l1, n2-n1, carry);
        return carry == 1 ? h : h->next;
    }
};