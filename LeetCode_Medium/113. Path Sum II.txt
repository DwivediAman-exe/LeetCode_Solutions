Given the root of a binary tree and an integer targetSum, return all root-to-leaf paths where the sum of the node values in the path equals targetSum. Each path should be returned as a list of the node values, not node references.
A root-to-leaf path is a path starting from the root and ending at any leaf node. A leaf is a node with no children.

Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22
Output: [[5,4,11,2],[5,8,4,5]]
Explanation: There are two paths whose sum equals targetSum:
5 + 4 + 11 + 2 = 22
5 + 8 + 4 + 5 = 22

Method 1: DFS
TC - O(N) SC - O(N) 

class Solution {
public:
    void Util(TreeNode* root, int sum, vector<int>v, vector<vector<int>>& ans)     {
        if(!root)
            return;
        
        sum = sum-root->val;
        v.push_back(root->val);
        if((!root->left && !root->right) && sum == 0) {
            ans.push_back(v);
        }
        
        Util(root->left, sum, v, ans);
        Util(root->right, sum, v, ans);
    }
    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
        if(!root)
            return {};
        vector<vector<int>>ans;
        vector<int>v;
        Util(root, targetSum, v, ans);
        return ans;
    }
};