Given the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.

Input: root = [1,2,3,null,5,null,4]
Output: [1,3,4]

Method 1: BFS
TC - O(N) SC - O(N)

class Solution {
public:
    vector<int> rightSideView(TreeNode* root) {
        if(!root)
            return {};
        vector<int>ans;
        queue<TreeNode*>q;
        q.push(root);
        while(!q.empty())
        {
            int len = q.size();
            for(int i=0;i<len;i++)
            {
                TreeNode* temp = q.front(); q.pop();
                if(i == len-1)
                    ans.push_back(temp->val);
                if(temp->left)
                    q.push(temp->left);
                if(temp->right)
                    q.push(temp->right);
            }
        }
        return ans;
    }
};

Method 2: DFS
TC - O(N) SC - O(N) (function stack space)

class Solution {
public:
    void Util(TreeNode* root, int level, vector<int>& ans) {
        if(!root)
            return;
    
        if(level == ans.size())
            ans.push_back(root->val);
        
        Util(root->right, level+1, ans);
        Util(root->left, level+1, ans);
    }
    vector<int> rightSideView(TreeNode* root) {
        if(!root)
            return {};
        vector<int>ans;
        int level = 0;
        Util(root, level, ans);
        return ans;
    }
};

Method 3: