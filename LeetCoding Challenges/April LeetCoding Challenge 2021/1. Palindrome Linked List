Solution 1 :

class Solution {
public:
    bool isPalindrome(ListNode* head) {
        ListNode* ptr = head;                // temporary pointer to head
        stack<int>st;                        // stack to store reverse of linkedlist
        while(ptr != NULL) {                 // Storing reverse of linkedlist
            st.push(ptr->val);
            ptr=ptr->next;
        }
        ptr=head;
        while(!st.empty()) {                // comparing last and first element one by one
            int x = st.top();
            st.pop();
            if(x != (ptr->val)) 
                return false;
            ptr=ptr->next;
        }
        return true;
    }
};

Solution 2 :

class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if(!head || !head->next) return true;
        ListNode* slow(head), *fast(head);
        while(fast && fast->next){
            slow = slow->next;
            fast = fast->next->next;
        }
        if(fast) slow = slow->next;                            // if odd, move one step forward
                                                               // Reverse second half
        ListNode* pre(NULL), *cur(slow), *next;
        while(cur){
            next = cur->next;
            cur->next = pre;
            pre = cur;
            cur = next;
        }
                                                               // Compare first half with reversed second half
        while(pre){
            if(pre->val != head->val) return false;
            pre = pre->next;
            head = head->next;
        }
        return true;
    }
};
