class Solution {
public:
    int maxProfit(vector<int> &prices) {
        if(prices.size()==0 || prices.size()==1)
            return 0;
       
        int ret = 0;
        for (size_t p = 1; p < prices.size(); ++p) 
            ret += max(prices[p] - prices[p - 1], 0);    
        return ret;
    }
};


/*
dp solution:

class Solution {
public:
	int maxProfit(vector<int>& prices) {
		if(prices.size()<=1) 
			return 0;
		int maxBuy=INT_MIN/2;  //max score you left when buying the current stock on ith day
		int maxSell=0;  //max score you get by selling stock on ith day
		
		for(int i=0;i<prices.size();i++)
		{
			int oldB=maxBuy;
			int oldS=maxSell;
			maxBuy=max(maxBuy,oldS-prices[i]);
			maxSell=max(maxSell,oldB+prices[i]);
		}
		return maxSell;
	}
};
*/