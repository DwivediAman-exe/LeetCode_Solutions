Given a binary tree, find its minimum depth.
The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.

Input: root = [3,9,20,null,null,15,7]
Output: 2

Method 1: DFS (Same as MaxDepth of Binary Tree)
TC - O(N) SC - O(N) (worst case)

class Solution {
public:
    int minDepth(TreeNode* root) {
		if(!root)
            return 0;
        
        int minl = minDepth(root->left);
        int minr = minDepth(root->right);
        
        if(minl == 0 || minr == 0)         // for skew tree
            return max(minl, minr) + 1;
        
        return min(minl, minr) + 1;
    }
};

Method 2: Alternate DFS
TC - O(N) SC - O(N) (worst case)

class Solution {
public:
    int minDepth(TreeNode* root) {
        if(!root)
            return 0;
        else if(!root->left && !root->right)
            return 1;
        else if(!root->left)
            return minDepth(root->right) + 1;
        else if(!root->right)
            return minDepth(root->left) + 1;
        return min(minDepth(root->left), minDepth(root->right)) + 1;
    }
};

Method 3: BFS
TC - O(N) SC - O(N) 

class Solution {
public:
    int minDepth(TreeNode* root) {
        if(!root)
            return 0;
        queue<TreeNode*>q;
        q.push(root);
        int ans = INT_MAX, level = 1;
        while(!q.empty())
        {
            int l = q.size();
            for(int i=0;i<l;i++) {
                TreeNode* temp = q.front();
                q.pop();

                if(!temp->left && !temp->right) {
                    ans = min(ans, level);
                    return ans;
                }
				
                if(temp->left)
                    q.push(temp->left);
                if(temp->right)
                    q.push(temp->right);
            }
            level++;
        }
        return -1;
    }
};