Given a non-empty binary search tree and a target value, find the value in the BST that is closest to the target.
Note:
Given target value is a floating point.
You are guaranteed to have only one unique value in the BST that is closest to the target.

Input: root = [4,2,5,1,3], target = 3.714286
Output: 4

Method 1: Auxillary array
TC - O(N) SC - O(N)

class Solution {
public:
	void Util(TreeNode* root, vector<int> &arr) {
        if(!root)
            return;
        Util(root->left, ans);
        ans.push_back(root->val);
        Util(root->right, ans);
    }
	int closestValue(TreeNode* root, double target) {
		vector<int>arr;
		Util(root, arr);

		int res = arr[0];
		for(int i=0;i<arr.size();i++)
			res = min(res, abs(target - arr[i]));

		return res;
	}
}

Method 2: Iterative
TC - O(LogN) SC - O(1)

class Solution {
public:
	int closestValue(TreeNode* root, double target) {
		int res = root->val;
		while(root)
		{
			if(abs(target - root->val) < abs(res - target))
				res = root->val;
			if(target < root->val)
				root = root->left;
			else
				root = root->right;
		}
		return res;
	}
}

