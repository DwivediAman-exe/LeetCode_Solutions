The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. That is,
F(0) = 0, F(1) = 1
F(n) = F(n - 1) + F(n - 2), for n > 1.
Given n, calculate F(n).

Input: n = 2
Output: 1
Explanation: F(2) = F(1) + F(0) = 1 + 0 = 1.

Method 1: Recursion
TC - O(2^N) SC - O(N)

class Solution {
public:
    int fib(int n) {
        if(n==0 || n==1)
            return n;
        else
            return fib(n-1) + fib(n-2);
    }
};

Method 2: Memoization
TC - O(2^N) SC - O(N)

class Solution {
public:
	int Util(int n, int dp[]) {
		if(n==0 || n==1)
			return n;
		if(dp[n] != -1)
			return dp[n];

		dp[n] = fib(n-1) + fib(n-2);
		return dp[n];
	}
    int fib(int n) {
		int dp[31];
        return Util(n, dp);
    }
};

Method 3: Tabulation
TC - O(N) SC - O(N)

class Solution {
public:
    int fib(int n) {
        int dp[31] = {};
		dp[0] = 0, dp[1] = 0;

		for(int i=2;i<=n;i++) {
			dp[i] = dp[i-1] + dp[i-2];
		}
		return dp[n];
    }
};

Method 4: Space optimized
TC - O(N) SC - O(1)

class Solution {
public:
    int fib(int n) {
        int a = 0, b = 1, c, i;
        if(n == 0)
            return a;
        for(i = 2; i <= n; i++)
        {
           c = a + b;
           a = b;
           b = c;
        }
        return b;
    }
};