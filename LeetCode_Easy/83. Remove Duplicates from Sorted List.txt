Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.

Input: head = [1,1,2]
Output: [1,2]

Method 1: Iterative
TC - O(N) SC - O(1)

class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        ListNode* curr = head;
        while(curr && curr->next)
        {
            if(curr->val == curr->next->val) {
                ListNode* temp = curr->next;
                curr->next = curr->next->next;
                delete temp;
            }
            else
                curr = curr->next;
        }
        return head;
    }
};

Method 2: Recursive
TC - O(N) SC - O(N)

class Solution {
public:
    ListNode* Util(ListNode* head, int val)
    {
        if(head == NULL)
            return head;
        if(head->val == val)
            return Util(head->next, head->val);
        else
            head->next = Util(head->next, head->val);
        return head;
    }
    ListNode* deleteDuplicates(ListNode* head) {
        if(head)
            Util(head, INT_MIN);
        return head;
    }
};