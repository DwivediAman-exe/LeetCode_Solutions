Given the root of a binary tree, return the inorder traversal of its nodes' values.

Input: root = [1,null,2,3]
Output: [1,3,2]

Method 1: Recursive
TC - O(N), SC - O(N) worst case and O(LogN) on average

class Solution {
public:
    void Util(TreeNode* root, vector<int> &ans) {
        if(!root)
            return;
        Util(root->left, ans);
        ans.push_back(root->val);
        Util(root->right, ans);
    }
    vector<int> inorderTraversal(TreeNode* root) {
        if(!root)
            return {};
        vector<int>ans;
        Util(root, ans);
        return ans;
    }
};

Method 2: Iterative stack 
TC - O(N), SC - O(N)   

class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        if(!root)
            return {};
        vector<int>ans;
        stack<TreeNode*>s;
        while(root || !s.empty())
        {
            while(root) {
                s.push(root);
                root = root->left;
            }
            root = s.top();
            s.pop();
            ans.push_back(root->val);
            root = root->right;
        }
        return ans;
    }
};

Method 3: Morris traversal
TC - O(N), SC - O(1)

class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int>ans;
		while(root)
		{
			if(root->left == NULL) {
				ans.push_back(root->val);
				root = root->right;
			}
			else {
				TreeNode* prev = root->left;
				while(prev->right && prev->right != root) {
					prev = prev->right;                  // travelling to the right most node of left subtree
				}
				if(prev->right == NULL) {
					prev->right = root;                  // making the thread
					root = root->left; 
				}
				else {
					prev->right = NULL;                    // breaking the thread
					ans.push_back(root->val);
					root = root->right;
				}
			}
		}
		return ans;
    }
};

