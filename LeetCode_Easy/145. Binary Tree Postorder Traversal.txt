Given the root of a binary tree, return the postorder traversal of its nodes' values.

Input: root = [1,null,2,3]
Output: [3,2,1]

Method 1: Recursive
TC - O(N), SC - O(N) worst case and O(LogN) on average

class Solution {
public:
    void Util(TreeNode* root, vector<int> &ans)
    {
        if(root==NULL)
            return;
        Util(root->left, ans);
        Util(root->right, ans);
        ans.push_back(root->val);
    }
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int>ans;
		Util(root, ans);
        return ans;
    }
};

Method 2: Iterative stack 
TC - O(N), SC - O(N)   

class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> ans;
        stack<TreeNode*> s;
        TreeNode* last = NULL;
        while (root || !s.empty()) 
		{
            if (root) {
                s.push(root);
                root = root -> left;
            } else {
                TreeNode* curr = s.top();
                if (curr -> right && last != curr -> right) {
                    root = curr -> right;
                } else {
                    ans.push_back(curr -> val);
                    last = curr;
                    s.pop();
                }
            }
        }
        return ans;
    }
};

Method 3: Alternate iterative Solution
TC - O(N), SC - O(N)   

class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        if(!root)
			return {};
		vector<int> ans;
        stack<TreeNode*> s;
		s.push(root);
        while(!s.empty()) 
		{
            TreeNode* curr = s.top();
            ans.push_back(curr->val);
            s.pop();
            if(curr->left) 
				s.push(curr->left);
            if(curr->right)
				 s.push(curr->right);
        }
        reverse(ans.begin(), ans.end());
        return ans;
    }
};

Method 4: Morris traversal
TC - O(N), SC - O(1)

class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> ans;
        while (root != NULL)
		{
            if (root->right == NULL) {
                ans.insert(ans.begin(), root->val);                    // Always insert at the beginning
                root = root->left; 
            }
			else {
                TreeNode* pred = root->right;
				while (pred->left != NULL && pred->left != root) {
            		pred = pred->left;
				}
                if (pred->left == NULL) {
                    pred->left = root;
                    ans.insert(ans.begin(), root->val);
                    root = root->right;   
                }else {
                    pred->left = NULL;
                    root = root->left;
                }
            }
        }
        return ans;
    }
};