Given the head of a singly linked list, return true if it is a palindrome.

Input: head = [1,2,2,1]
Output: true

Method 1: Stack
TC - O(N) SC - O(N)

class Solution {
public:
    bool isPalindrome(ListNode* head) {
        stack<int>s;
        ListNode* curr = head;
        while(curr) {
            s.push(curr->val);
            curr = curr->next;
        }
        
        curr = head;
        while(!s.empty()) {
            if(s.top() != curr->val)
                return false;
            s.pop();
            curr = curr->next;
        }
        
        return true;
    }
};

Method 2: Recursive
TC - O(N) SC - O(N)

class Solution {
public:
    bool solve(ListNode* &low, ListNode* high)
    {
        if(!low || !high)
            return true;
        
        bool ans = solve(low, high->next);
        if(ans == false) 
            return ans;
        
        if(low->val == high->val)
            ans = true;
        else
            ans = false;
        
        low = low->next;
        return ans;
    }
    bool isPalindrome(ListNode* &head) {
        return solve(head, head);
    }
};

Method 3: Using slow and fast pointer and splitting list
TC - O(N) SC - O(1)

class Solution {
public:
    bool isPalindrome(ListNode* &head) {
        ListNode* slow = head, *fast = head;
        while(fast && fast->next) {
            slow = slow->next;
            fast = fast->next->next;
        }
        
        ListNode* prev = slow;
        slow = slow->next;
        prev->next = NULL;
        
        while(slow) {
            ListNode* temp = slow->next;
            slow->next = prev;
            prev = slow;
            slow = temp;
        }
        
        fast = head; slow = prev;
        while (slow) {
            if (fast->val != slow->val) 
                return false;
            else 
                fast = fast->next, slow = slow->next;
        }
        return true;
    }
};