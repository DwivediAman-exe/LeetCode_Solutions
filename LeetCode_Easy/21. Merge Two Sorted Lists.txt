You are given the heads of two sorted linked lists list1 and list2.
Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.
Return the head of the merged linked list.

Input: list1 = [1,2,4], list2 = [1,3,4]
Output: [1,1,2,3,4,4]

Method 1: Using Dummy nodes
TC - O(N) SC - O(N)

class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode* result = new ListNode(0);
        ListNode* ptr = result;
        while(l1 || l2) 
        {
            if(l1 == NULL) {
                ptr->next = l2;
                l2 = l2->next;
            }
            else if(l2 == NULL) {
                ptr->next = l1;
                l1 = l1->next;
            }
            else if(l1->val < l2->val) {
                ptr->next = l1;
                l1 = l1->next;
            }
            else {
                ptr->next = l2;
                l2 = l2->next;
            }
            ptr = ptr->next;
        }
        return result->next;
    }
};

Method 2: Recursive
TC - O(N) SC - O(N)

class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(l1 == NULL)
            return l2;
        if(l2 == NULL)
            return l1;
        if(l1 == NULL && l2 == NULL)
            return {};
        if(l1->val > l2->val)
            l2->next = mergeTwoLists(l1, l2->next);
        else
        {
            l1->next = mergeTwoLists(l1->next, l2);
            l2 = l1;
        }
        return l2;
    }
};

Method 3: Without Dummy nodes
TC - O(N) SC - O(1)

