Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.
A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one.

Input: nums = [-10,-3,0,5,9]
Output: [0,-3,9,-10,null,5]
Explanation: [0,-10,5,null,-3,null,9] is also accepted.

Method 1: Recursion & Binary Search
TC - O(N) SC - O(N) 

class Solution {
public:
    TreeNode* makeBST(vector<int>& nums, int low, int high) {
        if(low > high)
            return NULL;
        
        int mid = low + (high-low)/2;
        TreeNode* root = new TreeNode(nums[mid]);
        
        root->left = makeBST(nums, low, mid-1);
        root->right = makeBST(nums, mid+1, high);
        return root;
    }
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        int low = 0;
        int high = nums.size()-1;
        return makeBST(nums, low, high);
    }
};