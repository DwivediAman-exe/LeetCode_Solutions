Given the head of a linked list and two integers m and n. Traverse the linked list and remove some nodes in the following way:
Start with the head as the current node.
Keep the first m nodes starting with the current node.
Remove the next n nodes
Keep repeating steps 2 and 3 until you reach the end of the list.
Return the head of the modified list after removing the mentioned nodes.
Follow up question: How can you solve this problem by modifying the list in-place?

Input: head = [1,2,3,4,5,6,7,8,9,10,11,12,13], m = 2, n = 3
Output: [1,2,6,7,11,12]

Method 1:
TC - O(N) SC - O(1)

class Solution {
public:
	ListNode* deleteNodes(ListNode* head, int m, int n) {
        ListNode dummyHead(0);
		dummyHead.next = head;
        ListNode* temp = &dummyHead;
        while(temp && temp->next) 
		{
            for(int i=1;i<=m && temp && temp->next; i++)
                temp = temp->next;
            for (int i=1;i<=n && temp && temp->next; i++)
                temp->next = temp->next->next;
        }
        return dummyHead.next;
    }
}