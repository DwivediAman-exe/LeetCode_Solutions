Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”

Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8
Output: 6
Explanation: The LCA of nodes 2 and 8 is 6.

Method 1: DFS and making the Path array
TC - O(N) SC - O(N)

class Solution {
public:
    bool findPath(TreeNode* root, TreeNode* dest, vector<TreeNode*> &path1) {
        if(!root)
            return false;
        
        path1.push_back(root);
        if(root->val == dest->val) 
            return true;

        if((root->left && findPath(root->left, dest, path1)) ||                                     (root->right && findPath(root->right, dest, path1)))
            return true;
           
        path1.pop_back();
        return false;   
    }
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        vector<TreeNode*>path1, path2;
        findPath(root, p, path1);
        findPath(root, q, path2);
        
        int n = min(path1.size(), path2.size());
        for(int i=1;i<n;i++)
            if(path1[i] != path2[i])
                return path1[i-1];
        
        return path1[n-1];
    }
};

Method 2: Efficient Solution
TC - O(N) SC - O(N)

class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if ((root -> val > p -> val) && (root -> val > q -> val)) {
            return lowestCommonAncestor(root -> left, p, q);
        }
        if ((root -> val < p -> val) && (root -> val < q -> val)) {
            return lowestCommonAncestor(root -> right, p, q);
        }
        return root;
    }
};

Method 3: Iterative
TC - O(N) SC - O(N)

class Solution {
public:
	TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
		while(root){
			if (p->val < root->val && q->val < root->val) 
                root = root->left;
			else if (p->val > root->val && q->val > root->val) 
                root = root->right;
			else 
                return root;
		}
		return root;
	}
};