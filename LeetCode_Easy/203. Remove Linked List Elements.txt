Given the head of a linked list and an integer val, remove all the nodes of the linked list that has Node.val == val, and return the new head.

Input: head = [1,2,6,3,4,5,6], val = 6
Output: [1,2,3,4,5]

Method 1:
TC - O(N) SC - O(1)

class Solution {
public:
    ListNode* removeElements(ListNode* head, int val) {
        ListNode* cur = head;
        ListNode* pre = head;
        while(cur != NULL)
        {
            if(head->val == val)
                head = head->next;
            else if(cur->val == val)
            {
                pre->next = cur->next;
                delete(cur);
                cur = pre;
            }
            pre = cur;
            cur = cur->next;
        }
        return head;
    }
};

Method 1: Alternate
TC - O(N) SC - O(1)

class Solution {
public:
    ListNode* removeElements(ListNode* head, int val) {
        while(head && head->val == val)         
                head = head->next;
        
        if(head == NULL)
            return head;

        ListNode *tmp = head;
        while(tmp->next)
        {
            if(tmp->next->val == val)
                tmp->next = tmp->next->next;
            else 
                tmp = tmp->next;
        }
        return head;
    }
};