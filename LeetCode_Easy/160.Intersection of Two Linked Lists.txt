/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    int getListSize(ListNode *head) {
        int size = 0;
        while (head) 
        {
            head = head->next;
            size++;
        }
        return size;
    }
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        int s1 = getListSize(headA);
        int s2 = getListSize(headB);
        if(s1 == 0 || s2 == 0) 
            return nullptr;
        if(s1>s2)
        {
            for(int i = 0; i < s1 -s2; i++) 
                headA = headA->next;
        }
        if(s1<s2) 
        {
            for(int i = 0; i < s2 -s1; i++) 
                headB = headB->next;
        }
        while (headA && headB)
        {
            if (headA == headB) 
                return headA;
            else 
            {
                headA = headA->next;    
                headB = headB->next;    
            }
        }
        return nullptr;
    }
};

Method 2:

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
    ListNode *ptrA = headA, *ptrB = headB;
    while (ptrA != ptrB) 
    { 
        ptrA = ptrA ? ptrA->next : headB;
        ptrB = ptrB ? ptrB->next : headA;
    }
    return ptrA;
    }
};